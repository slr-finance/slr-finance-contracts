/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SolarTokenInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "MIN_TX_AMOUNT_HARD_CAP()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blackList(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "excludeFromAntiWhale(address)": FunctionFragment;
    "excludeFromBlackListBlackList(address)": FunctionFragment;
    "excludeFromFee(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "includeInAntiWhale(address)": FunctionFragment;
    "includeInBlackList(address)": FunctionFragment;
    "includeInFee(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isExcludedFromAntiWhale(address)": FunctionFragment;
    "isExcludedFromFee(address)": FunctionFragment;
    "mainPairAddress()": FunctionFragment;
    "maxAmountToSell()": FunctionFragment;
    "maxTxAmount()": FunctionFragment;
    "milkyWay()": FunctionFragment;
    "milkyWayAddress()": FunctionFragment;
    "minAmountToSell()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "pairAddresses(address)": FunctionFragment;
    "pairSwapFee()": FunctionFragment;
    "pairedTokenAddress()": FunctionFragment;
    "referralActionBuy()": FunctionFragment;
    "referralActionSell()": FunctionFragment;
    "referralActionTransfer()": FunctionFragment;
    "referralServiceAddress()": FunctionFragment;
    "referrerRewardActionBuyPercent()": FunctionFragment;
    "referrerRewardActionSellPercent()": FunctionFragment;
    "referrerRewardActionTransferPercent()": FunctionFragment;
    "referrerRewardDivider()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAmountToSell(uint256,uint256)": FunctionFragment;
    "setMaxTxAmount(uint256)": FunctionFragment;
    "setMilkyWayAddress(address)": FunctionFragment;
    "setPairAddress(address,bool)": FunctionFragment;
    "setPairSwapFee(uint256)": FunctionFragment;
    "setReferralServiceAddress(address)": FunctionFragment;
    "setReferrerRewardPercents(uint256,uint256,uint256)": FunctionFragment;
    "setTaxBuyFee(uint256)": FunctionFragment;
    "setTaxSellFee(uint256)": FunctionFragment;
    "setTaxTransferFee(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "taxBuyFee()": FunctionFragment;
    "taxSellFee()": FunctionFragment;
    "taxTransferFee()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "MINTER_ROLE"
      | "MIN_TX_AMOUNT_HARD_CAP"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "blackList"
      | "decimals"
      | "decreaseAllowance"
      | "excludeFromAntiWhale"
      | "excludeFromBlackListBlackList"
      | "excludeFromFee"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "includeInAntiWhale"
      | "includeInBlackList"
      | "includeInFee"
      | "increaseAllowance"
      | "isExcludedFromAntiWhale"
      | "isExcludedFromFee"
      | "mainPairAddress"
      | "maxAmountToSell"
      | "maxTxAmount"
      | "milkyWay"
      | "milkyWayAddress"
      | "minAmountToSell"
      | "mint"
      | "name"
      | "owner"
      | "pairAddresses"
      | "pairSwapFee"
      | "pairedTokenAddress"
      | "referralActionBuy"
      | "referralActionSell"
      | "referralActionTransfer"
      | "referralServiceAddress"
      | "referrerRewardActionBuyPercent"
      | "referrerRewardActionSellPercent"
      | "referrerRewardActionTransferPercent"
      | "referrerRewardDivider"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "setAmountToSell"
      | "setMaxTxAmount"
      | "setMilkyWayAddress"
      | "setPairAddress"
      | "setPairSwapFee"
      | "setReferralServiceAddress"
      | "setReferrerRewardPercents"
      | "setTaxBuyFee"
      | "setTaxSellFee"
      | "setTaxTransferFee"
      | "supportsInterface"
      | "symbol"
      | "taxBuyFee"
      | "taxSellFee"
      | "taxTransferFee"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_TX_AMOUNT_HARD_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "blackList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromAntiWhale",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromBlackListBlackList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "includeInAntiWhale",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "includeInBlackList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "includeInFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromAntiWhale",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mainPairAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxAmountToSell",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "milkyWay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "milkyWayAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAmountToSell",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairAddresses",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pairSwapFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pairedTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralActionBuy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralActionSell",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralActionTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralServiceAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referrerRewardActionBuyPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referrerRewardActionSellPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referrerRewardActionTransferPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referrerRewardDivider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountToSell",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTxAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMilkyWayAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairSwapFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralServiceAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferrerRewardPercents",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxBuyFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxSellFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxTransferFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "taxBuyFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "taxSellFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taxTransferFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_TX_AMOUNT_HARD_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blackList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromAntiWhale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromBlackListBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "includeInAntiWhale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeInBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeInFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromAntiWhale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainPairAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAmountToSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "milkyWay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "milkyWayAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAmountToSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairedTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralActionBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralActionSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralActionTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralServiceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referrerRewardActionBuyPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referrerRewardActionSellPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referrerRewardActionTransferPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referrerRewardDivider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAmountToSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMilkyWayAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralServiceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferrerRewardPercents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaxBuyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaxSellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaxTransferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxBuyFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxSellFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taxTransferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ExcludeFromAntiWhale(address)": EventFragment;
    "ExcludeFromBlackList(address)": EventFragment;
    "ExcludeFromFee(address)": EventFragment;
    "IncludeInAntiWhale(address)": EventFragment;
    "IncludeInBlackList(address)": EventFragment;
    "IncludeInFee(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SellTax(uint256,uint256,address)": EventFragment;
    "SetMilkyWayAddress(address)": EventFragment;
    "SetPairAddress(address,bool)": EventFragment;
    "SetReferralServiceAddress(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateMaxTxAmount(uint256)": EventFragment;
    "UpdatePairSwapFee(uint256)": EventFragment;
    "UpdateReferrerRewardPercents(uint256,uint256,uint256)": EventFragment;
    "UpdateSellAmounts(uint256,uint256)": EventFragment;
    "UpdateTaxBuyFee(uint256)": EventFragment;
    "UpdateTaxSellFee(uint256)": EventFragment;
    "UpdateTaxTransferFee(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludeFromAntiWhale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludeFromBlackList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludeFromFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncludeInAntiWhale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncludeInBlackList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncludeInFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellTax"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMilkyWayAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPairAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReferralServiceAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMaxTxAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePairSwapFee"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateReferrerRewardPercents"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateSellAmounts"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTaxBuyFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTaxSellFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTaxTransferFee"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ExcludeFromAntiWhaleEventObject {
  account: string;
}
export type ExcludeFromAntiWhaleEvent = TypedEvent<
  [string],
  ExcludeFromAntiWhaleEventObject
>;

export type ExcludeFromAntiWhaleEventFilter =
  TypedEventFilter<ExcludeFromAntiWhaleEvent>;

export interface ExcludeFromBlackListEventObject {
  account: string;
}
export type ExcludeFromBlackListEvent = TypedEvent<
  [string],
  ExcludeFromBlackListEventObject
>;

export type ExcludeFromBlackListEventFilter =
  TypedEventFilter<ExcludeFromBlackListEvent>;

export interface ExcludeFromFeeEventObject {
  account: string;
}
export type ExcludeFromFeeEvent = TypedEvent<
  [string],
  ExcludeFromFeeEventObject
>;

export type ExcludeFromFeeEventFilter = TypedEventFilter<ExcludeFromFeeEvent>;

export interface IncludeInAntiWhaleEventObject {
  account: string;
}
export type IncludeInAntiWhaleEvent = TypedEvent<
  [string],
  IncludeInAntiWhaleEventObject
>;

export type IncludeInAntiWhaleEventFilter =
  TypedEventFilter<IncludeInAntiWhaleEvent>;

export interface IncludeInBlackListEventObject {
  account: string;
}
export type IncludeInBlackListEvent = TypedEvent<
  [string],
  IncludeInBlackListEventObject
>;

export type IncludeInBlackListEventFilter =
  TypedEventFilter<IncludeInBlackListEvent>;

export interface IncludeInFeeEventObject {
  account: string;
}
export type IncludeInFeeEvent = TypedEvent<[string], IncludeInFeeEventObject>;

export type IncludeInFeeEventFilter = TypedEventFilter<IncludeInFeeEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SellTaxEventObject {
  amountIn: BigNumber;
  amountOut: BigNumber;
  milkyWayAddress: string;
}
export type SellTaxEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  SellTaxEventObject
>;

export type SellTaxEventFilter = TypedEventFilter<SellTaxEvent>;

export interface SetMilkyWayAddressEventObject {
  milkyWayAddress: string;
}
export type SetMilkyWayAddressEvent = TypedEvent<
  [string],
  SetMilkyWayAddressEventObject
>;

export type SetMilkyWayAddressEventFilter =
  TypedEventFilter<SetMilkyWayAddressEvent>;

export interface SetPairAddressEventObject {
  pairAddress: string;
  val: boolean;
}
export type SetPairAddressEvent = TypedEvent<
  [string, boolean],
  SetPairAddressEventObject
>;

export type SetPairAddressEventFilter = TypedEventFilter<SetPairAddressEvent>;

export interface SetReferralServiceAddressEventObject {
  referralServiceAddress: string;
}
export type SetReferralServiceAddressEvent = TypedEvent<
  [string],
  SetReferralServiceAddressEventObject
>;

export type SetReferralServiceAddressEventFilter =
  TypedEventFilter<SetReferralServiceAddressEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpdateMaxTxAmountEventObject {
  newAmount: BigNumber;
}
export type UpdateMaxTxAmountEvent = TypedEvent<
  [BigNumber],
  UpdateMaxTxAmountEventObject
>;

export type UpdateMaxTxAmountEventFilter =
  TypedEventFilter<UpdateMaxTxAmountEvent>;

export interface UpdatePairSwapFeeEventObject {
  fee: BigNumber;
}
export type UpdatePairSwapFeeEvent = TypedEvent<
  [BigNumber],
  UpdatePairSwapFeeEventObject
>;

export type UpdatePairSwapFeeEventFilter =
  TypedEventFilter<UpdatePairSwapFeeEvent>;

export interface UpdateReferrerRewardPercentsEventObject {
  referrerRewardActionBuyPercent: BigNumber;
  referrerRewardActionSellPercent: BigNumber;
  referrerRewardActionTransferPercent: BigNumber;
}
export type UpdateReferrerRewardPercentsEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  UpdateReferrerRewardPercentsEventObject
>;

export type UpdateReferrerRewardPercentsEventFilter =
  TypedEventFilter<UpdateReferrerRewardPercentsEvent>;

export interface UpdateSellAmountsEventObject {
  newMinAmount: BigNumber;
  maxMinAmount: BigNumber;
}
export type UpdateSellAmountsEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateSellAmountsEventObject
>;

export type UpdateSellAmountsEventFilter =
  TypedEventFilter<UpdateSellAmountsEvent>;

export interface UpdateTaxBuyFeeEventObject {
  fee: BigNumber;
}
export type UpdateTaxBuyFeeEvent = TypedEvent<
  [BigNumber],
  UpdateTaxBuyFeeEventObject
>;

export type UpdateTaxBuyFeeEventFilter = TypedEventFilter<UpdateTaxBuyFeeEvent>;

export interface UpdateTaxSellFeeEventObject {
  fee: BigNumber;
}
export type UpdateTaxSellFeeEvent = TypedEvent<
  [BigNumber],
  UpdateTaxSellFeeEventObject
>;

export type UpdateTaxSellFeeEventFilter =
  TypedEventFilter<UpdateTaxSellFeeEvent>;

export interface UpdateTaxTransferFeeEventObject {
  fee: BigNumber;
}
export type UpdateTaxTransferFeeEvent = TypedEvent<
  [BigNumber],
  UpdateTaxTransferFeeEventObject
>;

export type UpdateTaxTransferFeeEventFilter =
  TypedEventFilter<UpdateTaxTransferFeeEvent>;

export interface SolarToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SolarTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MIN_TX_AMOUNT_HARD_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    blackList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    excludeFromAntiWhale(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    excludeFromBlackListBlackList(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    excludeFromFee(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    includeInAntiWhale(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    includeInBlackList(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    includeInFee(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isExcludedFromAntiWhale(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExcludedFromFee(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mainPairAddress(overrides?: CallOverrides): Promise<[string]>;

    maxAmountToSell(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    milkyWay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    milkyWayAddress(overrides?: CallOverrides): Promise<[string]>;

    minAmountToSell(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pairSwapFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    pairedTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    referralActionBuy(overrides?: CallOverrides): Promise<[number]>;

    referralActionSell(overrides?: CallOverrides): Promise<[number]>;

    referralActionTransfer(overrides?: CallOverrides): Promise<[number]>;

    referralServiceAddress(overrides?: CallOverrides): Promise<[string]>;

    referrerRewardActionBuyPercent(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referrerRewardActionSellPercent(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referrerRewardActionTransferPercent(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referrerRewardDivider(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAmountToSell(
      _minAmountToSell: PromiseOrValue<BigNumberish>,
      _maxAmountToSell: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxTxAmount(
      _maxTxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMilkyWayAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPairAddress(
      _pairAddress: PromiseOrValue<string>,
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPairSwapFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReferralServiceAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReferrerRewardPercents(
      _referrerRewardActionBuyPercent: PromiseOrValue<BigNumberish>,
      _referrerRewardActionSellPercent: PromiseOrValue<BigNumberish>,
      _referrerRewardActionTransferPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTaxBuyFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTaxSellFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTaxTransferFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    taxBuyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    taxSellFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    taxTransferFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  MIN_TX_AMOUNT_HARD_CAP(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  blackList(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  excludeFromAntiWhale(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  excludeFromBlackListBlackList(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  excludeFromFee(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  includeInAntiWhale(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  includeInBlackList(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  includeInFee(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isExcludedFromAntiWhale(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExcludedFromFee(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mainPairAddress(overrides?: CallOverrides): Promise<string>;

  maxAmountToSell(overrides?: CallOverrides): Promise<BigNumber>;

  maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  milkyWay(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  milkyWayAddress(overrides?: CallOverrides): Promise<string>;

  minAmountToSell(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairAddresses(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pairSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

  pairedTokenAddress(overrides?: CallOverrides): Promise<string>;

  referralActionBuy(overrides?: CallOverrides): Promise<number>;

  referralActionSell(overrides?: CallOverrides): Promise<number>;

  referralActionTransfer(overrides?: CallOverrides): Promise<number>;

  referralServiceAddress(overrides?: CallOverrides): Promise<string>;

  referrerRewardActionBuyPercent(overrides?: CallOverrides): Promise<BigNumber>;

  referrerRewardActionSellPercent(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  referrerRewardActionTransferPercent(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  referrerRewardDivider(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAmountToSell(
    _minAmountToSell: PromiseOrValue<BigNumberish>,
    _maxAmountToSell: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxTxAmount(
    _maxTxAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMilkyWayAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPairAddress(
    _pairAddress: PromiseOrValue<string>,
    _val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPairSwapFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReferralServiceAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReferrerRewardPercents(
    _referrerRewardActionBuyPercent: PromiseOrValue<BigNumberish>,
    _referrerRewardActionSellPercent: PromiseOrValue<BigNumberish>,
    _referrerRewardActionTransferPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTaxBuyFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTaxSellFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTaxTransferFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  taxBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

  taxSellFee(overrides?: CallOverrides): Promise<BigNumber>;

  taxTransferFee(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    MIN_TX_AMOUNT_HARD_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blackList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    excludeFromAntiWhale(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeFromBlackListBlackList(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeFromFee(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    includeInAntiWhale(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    includeInBlackList(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    includeInFee(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromAntiWhale(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromFee(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mainPairAddress(overrides?: CallOverrides): Promise<string>;

    maxAmountToSell(overrides?: CallOverrides): Promise<BigNumber>;

    maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    milkyWay(overrides?: CallOverrides): Promise<void>;

    milkyWayAddress(overrides?: CallOverrides): Promise<string>;

    minAmountToSell(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pairSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    pairedTokenAddress(overrides?: CallOverrides): Promise<string>;

    referralActionBuy(overrides?: CallOverrides): Promise<number>;

    referralActionSell(overrides?: CallOverrides): Promise<number>;

    referralActionTransfer(overrides?: CallOverrides): Promise<number>;

    referralServiceAddress(overrides?: CallOverrides): Promise<string>;

    referrerRewardActionBuyPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referrerRewardActionSellPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referrerRewardActionTransferPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referrerRewardDivider(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAmountToSell(
      _minAmountToSell: PromiseOrValue<BigNumberish>,
      _maxAmountToSell: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTxAmount(
      _maxTxAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMilkyWayAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPairAddress(
      _pairAddress: PromiseOrValue<string>,
      _val: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPairSwapFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferralServiceAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferrerRewardPercents(
      _referrerRewardActionBuyPercent: PromiseOrValue<BigNumberish>,
      _referrerRewardActionSellPercent: PromiseOrValue<BigNumberish>,
      _referrerRewardActionTransferPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxBuyFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxSellFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxTransferFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    taxBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

    taxSellFee(overrides?: CallOverrides): Promise<BigNumber>;

    taxTransferFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "ExcludeFromAntiWhale(address)"(
      account?: null
    ): ExcludeFromAntiWhaleEventFilter;
    ExcludeFromAntiWhale(account?: null): ExcludeFromAntiWhaleEventFilter;

    "ExcludeFromBlackList(address)"(
      account?: null
    ): ExcludeFromBlackListEventFilter;
    ExcludeFromBlackList(account?: null): ExcludeFromBlackListEventFilter;

    "ExcludeFromFee(address)"(account?: null): ExcludeFromFeeEventFilter;
    ExcludeFromFee(account?: null): ExcludeFromFeeEventFilter;

    "IncludeInAntiWhale(address)"(
      account?: null
    ): IncludeInAntiWhaleEventFilter;
    IncludeInAntiWhale(account?: null): IncludeInAntiWhaleEventFilter;

    "IncludeInBlackList(address)"(
      account?: null
    ): IncludeInBlackListEventFilter;
    IncludeInBlackList(account?: null): IncludeInBlackListEventFilter;

    "IncludeInFee(address)"(account?: null): IncludeInFeeEventFilter;
    IncludeInFee(account?: null): IncludeInFeeEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SellTax(uint256,uint256,address)"(
      amountIn?: null,
      amountOut?: null,
      milkyWayAddress?: PromiseOrValue<string> | null
    ): SellTaxEventFilter;
    SellTax(
      amountIn?: null,
      amountOut?: null,
      milkyWayAddress?: PromiseOrValue<string> | null
    ): SellTaxEventFilter;

    "SetMilkyWayAddress(address)"(
      milkyWayAddress?: null
    ): SetMilkyWayAddressEventFilter;
    SetMilkyWayAddress(milkyWayAddress?: null): SetMilkyWayAddressEventFilter;

    "SetPairAddress(address,bool)"(
      pairAddress?: null,
      val?: null
    ): SetPairAddressEventFilter;
    SetPairAddress(pairAddress?: null, val?: null): SetPairAddressEventFilter;

    "SetReferralServiceAddress(address)"(
      referralServiceAddress?: null
    ): SetReferralServiceAddressEventFilter;
    SetReferralServiceAddress(
      referralServiceAddress?: null
    ): SetReferralServiceAddressEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "UpdateMaxTxAmount(uint256)"(
      newAmount?: null
    ): UpdateMaxTxAmountEventFilter;
    UpdateMaxTxAmount(newAmount?: null): UpdateMaxTxAmountEventFilter;

    "UpdatePairSwapFee(uint256)"(fee?: null): UpdatePairSwapFeeEventFilter;
    UpdatePairSwapFee(fee?: null): UpdatePairSwapFeeEventFilter;

    "UpdateReferrerRewardPercents(uint256,uint256,uint256)"(
      referrerRewardActionBuyPercent?: null,
      referrerRewardActionSellPercent?: null,
      referrerRewardActionTransferPercent?: null
    ): UpdateReferrerRewardPercentsEventFilter;
    UpdateReferrerRewardPercents(
      referrerRewardActionBuyPercent?: null,
      referrerRewardActionSellPercent?: null,
      referrerRewardActionTransferPercent?: null
    ): UpdateReferrerRewardPercentsEventFilter;

    "UpdateSellAmounts(uint256,uint256)"(
      newMinAmount?: null,
      maxMinAmount?: null
    ): UpdateSellAmountsEventFilter;
    UpdateSellAmounts(
      newMinAmount?: null,
      maxMinAmount?: null
    ): UpdateSellAmountsEventFilter;

    "UpdateTaxBuyFee(uint256)"(fee?: null): UpdateTaxBuyFeeEventFilter;
    UpdateTaxBuyFee(fee?: null): UpdateTaxBuyFeeEventFilter;

    "UpdateTaxSellFee(uint256)"(fee?: null): UpdateTaxSellFeeEventFilter;
    UpdateTaxSellFee(fee?: null): UpdateTaxSellFeeEventFilter;

    "UpdateTaxTransferFee(uint256)"(
      fee?: null
    ): UpdateTaxTransferFeeEventFilter;
    UpdateTaxTransferFee(fee?: null): UpdateTaxTransferFeeEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_TX_AMOUNT_HARD_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blackList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    excludeFromAntiWhale(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    excludeFromBlackListBlackList(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    excludeFromFee(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    includeInAntiWhale(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    includeInBlackList(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    includeInFee(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isExcludedFromAntiWhale(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExcludedFromFee(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainPairAddress(overrides?: CallOverrides): Promise<BigNumber>;

    maxAmountToSell(overrides?: CallOverrides): Promise<BigNumber>;

    maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    milkyWay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    milkyWayAddress(overrides?: CallOverrides): Promise<BigNumber>;

    minAmountToSell(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    pairedTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    referralActionBuy(overrides?: CallOverrides): Promise<BigNumber>;

    referralActionSell(overrides?: CallOverrides): Promise<BigNumber>;

    referralActionTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    referralServiceAddress(overrides?: CallOverrides): Promise<BigNumber>;

    referrerRewardActionBuyPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referrerRewardActionSellPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referrerRewardActionTransferPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referrerRewardDivider(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAmountToSell(
      _minAmountToSell: PromiseOrValue<BigNumberish>,
      _maxAmountToSell: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxTxAmount(
      _maxTxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMilkyWayAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPairAddress(
      _pairAddress: PromiseOrValue<string>,
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPairSwapFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReferralServiceAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReferrerRewardPercents(
      _referrerRewardActionBuyPercent: PromiseOrValue<BigNumberish>,
      _referrerRewardActionSellPercent: PromiseOrValue<BigNumberish>,
      _referrerRewardActionTransferPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTaxBuyFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTaxSellFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTaxTransferFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    taxBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

    taxSellFee(overrides?: CallOverrides): Promise<BigNumber>;

    taxTransferFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_TX_AMOUNT_HARD_CAP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blackList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromAntiWhale(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromBlackListBlackList(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromFee(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    includeInAntiWhale(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    includeInBlackList(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    includeInFee(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isExcludedFromAntiWhale(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExcludedFromFee(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainPairAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAmountToSell(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    milkyWay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    milkyWayAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minAmountToSell(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairSwapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairedTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralActionBuy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralActionSell(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralActionTransfer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralServiceAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referrerRewardActionBuyPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referrerRewardActionSellPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referrerRewardActionTransferPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referrerRewardDivider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAmountToSell(
      _minAmountToSell: PromiseOrValue<BigNumberish>,
      _maxAmountToSell: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTxAmount(
      _maxTxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMilkyWayAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPairAddress(
      _pairAddress: PromiseOrValue<string>,
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPairSwapFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReferralServiceAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReferrerRewardPercents(
      _referrerRewardActionBuyPercent: PromiseOrValue<BigNumberish>,
      _referrerRewardActionSellPercent: PromiseOrValue<BigNumberish>,
      _referrerRewardActionTransferPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTaxBuyFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTaxSellFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTaxTransferFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxBuyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxSellFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxTransferFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
