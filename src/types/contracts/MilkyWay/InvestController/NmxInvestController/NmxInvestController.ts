/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface NmxInvestControllerInterface extends utils.Interface {
  functions: {
    "bnbAddress()": FunctionFragment;
    "claimAndBuyBack()": FunctionFragment;
    "factoryAddress()": FunctionFragment;
    "getTokenPriceInBnb(address)": FunctionFragment;
    "invest(uint256)": FunctionFragment;
    "investedBnb()": FunctionFragment;
    "investedTokensByBnbPrice()": FunctionFragment;
    "investingTokenAddress()": FunctionFragment;
    "investingTokenType()": FunctionFragment;
    "rewardsTokenAddress()": FunctionFragment;
    "stakingServiceAddress()": FunctionFragment;
    "swapFee()": FunctionFragment;
    "withdrawalAndRefoundToMilkyWal(uint256)": FunctionFragment;
    "withdrawnBnb()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bnbAddress"
      | "claimAndBuyBack"
      | "factoryAddress"
      | "getTokenPriceInBnb"
      | "invest"
      | "investedBnb"
      | "investedTokensByBnbPrice"
      | "investingTokenAddress"
      | "investingTokenType"
      | "rewardsTokenAddress"
      | "stakingServiceAddress"
      | "swapFee"
      | "withdrawalAndRefoundToMilkyWal"
      | "withdrawnBnb"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bnbAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndBuyBack",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "factoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPriceInBnb",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "investedBnb",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investedTokensByBnbPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investingTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investingTokenType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingServiceAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "swapFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawalAndRefoundToMilkyWal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawnBnb",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "bnbAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAndBuyBack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPriceInBnb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investedBnb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investedTokensByBnbPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investingTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investingTokenType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingServiceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalAndRefoundToMilkyWal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawnBnb",
    data: BytesLike
  ): Result;

  events: {};
}

export interface NmxInvestController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NmxInvestControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bnbAddress(overrides?: CallOverrides): Promise<[string]>;

    claimAndBuyBack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factoryAddress(overrides?: CallOverrides): Promise<[string]>;

    getTokenPriceInBnb(
      _targetToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    invest(
      _investingBnbAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    investedBnb(overrides?: CallOverrides): Promise<[BigNumber]>;

    investedTokensByBnbPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { priceInBnb: BigNumber }>;

    investingTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    investingTokenType(overrides?: CallOverrides): Promise<[number]>;

    rewardsTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    stakingServiceAddress(overrides?: CallOverrides): Promise<[string]>;

    swapFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalAndRefoundToMilkyWal(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawnBnb(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  bnbAddress(overrides?: CallOverrides): Promise<string>;

  claimAndBuyBack(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factoryAddress(overrides?: CallOverrides): Promise<string>;

  getTokenPriceInBnb(
    _targetToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  invest(
    _investingBnbAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  investedBnb(overrides?: CallOverrides): Promise<BigNumber>;

  investedTokensByBnbPrice(overrides?: CallOverrides): Promise<BigNumber>;

  investingTokenAddress(overrides?: CallOverrides): Promise<string>;

  investingTokenType(overrides?: CallOverrides): Promise<number>;

  rewardsTokenAddress(overrides?: CallOverrides): Promise<string>;

  stakingServiceAddress(overrides?: CallOverrides): Promise<string>;

  swapFee(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalAndRefoundToMilkyWal(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawnBnb(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    bnbAddress(overrides?: CallOverrides): Promise<string>;

    claimAndBuyBack(overrides?: CallOverrides): Promise<void>;

    factoryAddress(overrides?: CallOverrides): Promise<string>;

    getTokenPriceInBnb(
      _targetToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invest(
      _investingBnbAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    investedBnb(overrides?: CallOverrides): Promise<BigNumber>;

    investedTokensByBnbPrice(overrides?: CallOverrides): Promise<BigNumber>;

    investingTokenAddress(overrides?: CallOverrides): Promise<string>;

    investingTokenType(overrides?: CallOverrides): Promise<number>;

    rewardsTokenAddress(overrides?: CallOverrides): Promise<string>;

    stakingServiceAddress(overrides?: CallOverrides): Promise<string>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalAndRefoundToMilkyWal(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawnBnb(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    bnbAddress(overrides?: CallOverrides): Promise<BigNumber>;

    claimAndBuyBack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPriceInBnb(
      _targetToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invest(
      _investingBnbAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    investedBnb(overrides?: CallOverrides): Promise<BigNumber>;

    investedTokensByBnbPrice(overrides?: CallOverrides): Promise<BigNumber>;

    investingTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    investingTokenType(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    stakingServiceAddress(overrides?: CallOverrides): Promise<BigNumber>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalAndRefoundToMilkyWal(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawnBnb(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bnbAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimAndBuyBack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factoryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenPriceInBnb(
      _targetToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invest(
      _investingBnbAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    investedBnb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    investedTokensByBnbPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investingTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investingTokenType(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingServiceAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalAndRefoundToMilkyWal(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawnBnb(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
