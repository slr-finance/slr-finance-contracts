/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Pausable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC20PresetMinterPauser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PresetMinterPauser__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFactory__factory>;
    getContractFactory(
      name: "IPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPair__factory>;
    getContractFactory(
      name: "IRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouter01__factory>;
    getContractFactory(
      name: "IRouter02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouter02__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "BaseInvestController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseInvestController__factory>;
    getContractFactory(
      name: "IBaseInvestController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseInvestController__factory>;
    getContractFactory(
      name: "InvestControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InvestControl__factory>;
    getContractFactory(
      name: "IStakingService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingService__factory>;
    getContractFactory(
      name: "NmxInvestController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NmxInvestController__factory>;
    getContractFactory(
      name: "MilkyWay",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MilkyWay__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;
    getContractFactory(
      name: "PresaleService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PresaleService__factory>;
    getContractFactory(
      name: "ReferralService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReferralService__factory>;
    getContractFactory(
      name: "SolarToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SolarToken__factory>;
    getContractFactory(
      name: "StakingService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingService__factory>;
    getContractFactory(
      name: "Recoverable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Recoverable__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Pausable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC20PresetMinterPauser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PresetMinterPauser>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFactory>;
    getContractAt(
      name: "IPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPair>;
    getContractAt(
      name: "IRouter01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouter01>;
    getContractAt(
      name: "IRouter02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouter02>;
    getContractAt(
      name: "Migrations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "BaseInvestController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseInvestController>;
    getContractAt(
      name: "IBaseInvestController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseInvestController>;
    getContractAt(
      name: "InvestControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InvestControl>;
    getContractAt(
      name: "IStakingService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingService>;
    getContractAt(
      name: "NmxInvestController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NmxInvestController>;
    getContractAt(
      name: "MilkyWay",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MilkyWay>;
    getContractAt(
      name: "Multicall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;
    getContractAt(
      name: "PresaleService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PresaleService>;
    getContractAt(
      name: "ReferralService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReferralService>;
    getContractAt(
      name: "SolarToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SolarToken>;
    getContractAt(
      name: "StakingService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingService>;
    getContractAt(
      name: "Recoverable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Recoverable>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
